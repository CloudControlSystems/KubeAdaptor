// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.4
// source: TaskContainerBuilder.proto

//option go_package = ".;TaskContainerBuilder";

package TaskContainerBuilder

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//工作流任务输入请求
type InputWorkflowTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//workflow的ID
	WorkflowId string `protobuf:"bytes,1,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	//workflow的task数目
	TaskNum uint32 `protobuf:"varint,2,opt,name=taskNum,proto3" json:"taskNum,omitempty"`
	//taskName
	TaskName string `protobuf:"bytes,3,opt,name=taskName,proto3" json:"taskName,omitempty"`
	//任务镜像
	Image string `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	//基本单位 millicore(1Core=1000millicore)
	Cpu uint64 `protobuf:"varint,5,opt,name=cpu,proto3" json:"cpu,omitempty"`
	//基本单位 MiB
	Mem uint64 `protobuf:"varint,6,opt,name=mem,proto3" json:"mem,omitempty"`
	//任务在工作流的执行顺序
	TaskOrder uint32 `protobuf:"varint,7,opt,name=taskOrder,proto3" json:"taskOrder,omitempty"`
	// 环境变量
	Env map[string]string `protobuf:"bytes,8,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 输入向量
	InputVector []string `protobuf:"bytes,9,rep,name=input_vector,json=inputVector,proto3" json:"input_vector,omitempty"`
	// 输出向量
	OutputVector []string `protobuf:"bytes,10,rep,name=output_vector,json=outputVector,proto3" json:"output_vector,omitempty"`
	//任务pod所需参数
	Args []string `protobuf:"bytes,11,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *InputWorkflowTaskRequest) Reset() {
	*x = InputWorkflowTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TaskContainerBuilder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputWorkflowTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputWorkflowTaskRequest) ProtoMessage() {}

func (x *InputWorkflowTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_TaskContainerBuilder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputWorkflowTaskRequest.ProtoReflect.Descriptor instead.
func (*InputWorkflowTaskRequest) Descriptor() ([]byte, []int) {
	return file_TaskContainerBuilder_proto_rawDescGZIP(), []int{0}
}

func (x *InputWorkflowTaskRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *InputWorkflowTaskRequest) GetTaskNum() uint32 {
	if x != nil {
		return x.TaskNum
	}
	return 0
}

func (x *InputWorkflowTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *InputWorkflowTaskRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *InputWorkflowTaskRequest) GetCpu() uint64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *InputWorkflowTaskRequest) GetMem() uint64 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *InputWorkflowTaskRequest) GetTaskOrder() uint32 {
	if x != nil {
		return x.TaskOrder
	}
	return 0
}

func (x *InputWorkflowTaskRequest) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *InputWorkflowTaskRequest) GetInputVector() []string {
	if x != nil {
		return x.InputVector
	}
	return nil
}

func (x *InputWorkflowTaskRequest) GetOutputVector() []string {
	if x != nil {
		return x.OutputVector
	}
	return nil
}

func (x *InputWorkflowTaskRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type InputWorkflowTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//成功创建 pod 的状态码，1表示成功
	Result uint32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	//pod共享存储路径
	VolumePath string `protobuf:"bytes,2,opt,name=volumePath,proto3" json:"volumePath,omitempty"`
	//在失败状态下，可以设置状态码
	//成功状态（result>=1），客户端不关系此字段，置为 0 即可
	ErrNo uint32 `protobuf:"varint,3,opt,name=err_no,json=errNo,proto3" json:"err_no,omitempty"`
}

func (x *InputWorkflowTaskResponse) Reset() {
	*x = InputWorkflowTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TaskContainerBuilder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputWorkflowTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputWorkflowTaskResponse) ProtoMessage() {}

func (x *InputWorkflowTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_TaskContainerBuilder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputWorkflowTaskResponse.ProtoReflect.Descriptor instead.
func (*InputWorkflowTaskResponse) Descriptor() ([]byte, []int) {
	return file_TaskContainerBuilder_proto_rawDescGZIP(), []int{1}
}

func (x *InputWorkflowTaskResponse) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *InputWorkflowTaskResponse) GetVolumePath() string {
	if x != nil {
		return x.VolumePath
	}
	return ""
}

func (x *InputWorkflowTaskResponse) GetErrNo() uint32 {
	if x != nil {
		return x.ErrNo
	}
	return 0
}

//请求发送下一个工作流
type NextWorkflowSendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//已经完成的workflow的ID
	FinishedWorkflowId string `protobuf:"bytes,1,opt,name=finishedWorkflowId,proto3" json:"finishedWorkflowId,omitempty"`
}

func (x *NextWorkflowSendRequest) Reset() {
	*x = NextWorkflowSendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TaskContainerBuilder_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextWorkflowSendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextWorkflowSendRequest) ProtoMessage() {}

func (x *NextWorkflowSendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_TaskContainerBuilder_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextWorkflowSendRequest.ProtoReflect.Descriptor instead.
func (*NextWorkflowSendRequest) Descriptor() ([]byte, []int) {
	return file_TaskContainerBuilder_proto_rawDescGZIP(), []int{2}
}

func (x *NextWorkflowSendRequest) GetFinishedWorkflowId() string {
	if x != nil {
		return x.FinishedWorkflowId
	}
	return ""
}

type NextWorkflowSendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//开始发送下一个工作流状态码，1表示成功
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *NextWorkflowSendResponse) Reset() {
	*x = NextWorkflowSendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TaskContainerBuilder_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextWorkflowSendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextWorkflowSendResponse) ProtoMessage() {}

func (x *NextWorkflowSendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_TaskContainerBuilder_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextWorkflowSendResponse.ProtoReflect.Descriptor instead.
func (*NextWorkflowSendResponse) Descriptor() ([]byte, []int) {
	return file_TaskContainerBuilder_proto_rawDescGZIP(), []int{3}
}

func (x *NextWorkflowSendResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_TaskContainerBuilder_proto protoreflect.FileDescriptor

var file_TaskContainerBuilder_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x22, 0xa7, 0x03, 0x0a, 0x18, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x70, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6d, 0x65, 0x6d, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x49, 0x0a,
	0x03, 0x65, 0x6e, 0x76, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6a, 0x0a, 0x19,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x65, 0x72, 0x72, 0x4e, 0x6f, 0x22, 0x49, 0x0a, 0x17, 0x4e, 0x65, 0x78, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x18, 0x4e, 0x65, 0x78, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x93, 0x01, 0x0a, 0x1b, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x11, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2e, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x8c, 0x01,
	0x0a, 0x17, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x71, 0x0a, 0x10, 0x4e, 0x65, 0x78,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x2d, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_TaskContainerBuilder_proto_rawDescOnce sync.Once
	file_TaskContainerBuilder_proto_rawDescData = file_TaskContainerBuilder_proto_rawDesc
)

func file_TaskContainerBuilder_proto_rawDescGZIP() []byte {
	file_TaskContainerBuilder_proto_rawDescOnce.Do(func() {
		file_TaskContainerBuilder_proto_rawDescData = protoimpl.X.CompressGZIP(file_TaskContainerBuilder_proto_rawDescData)
	})
	return file_TaskContainerBuilder_proto_rawDescData
}

var file_TaskContainerBuilder_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_TaskContainerBuilder_proto_goTypes = []interface{}{
	(*InputWorkflowTaskRequest)(nil),  // 0: TaskContainerBuilder.InputWorkflowTaskRequest
	(*InputWorkflowTaskResponse)(nil), // 1: TaskContainerBuilder.InputWorkflowTaskResponse
	(*NextWorkflowSendRequest)(nil),   // 2: TaskContainerBuilder.NextWorkflowSendRequest
	(*NextWorkflowSendResponse)(nil),  // 3: TaskContainerBuilder.NextWorkflowSendResponse
	nil,                               // 4: TaskContainerBuilder.InputWorkflowTaskRequest.EnvEntry
}
var file_TaskContainerBuilder_proto_depIdxs = []int32{
	4, // 0: TaskContainerBuilder.InputWorkflowTaskRequest.env:type_name -> TaskContainerBuilder.InputWorkflowTaskRequest.EnvEntry
	0, // 1: TaskContainerBuilder.TaskContainerBuilderService.InputWorkflowTask:input_type -> TaskContainerBuilder.InputWorkflowTaskRequest
	2, // 2: TaskContainerBuilder.WorkflowInjectorService.NextWorkflowSend:input_type -> TaskContainerBuilder.NextWorkflowSendRequest
	1, // 3: TaskContainerBuilder.TaskContainerBuilderService.InputWorkflowTask:output_type -> TaskContainerBuilder.InputWorkflowTaskResponse
	3, // 4: TaskContainerBuilder.WorkflowInjectorService.NextWorkflowSend:output_type -> TaskContainerBuilder.NextWorkflowSendResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_TaskContainerBuilder_proto_init() }
func file_TaskContainerBuilder_proto_init() {
	if File_TaskContainerBuilder_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_TaskContainerBuilder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputWorkflowTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TaskContainerBuilder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputWorkflowTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TaskContainerBuilder_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextWorkflowSendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TaskContainerBuilder_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextWorkflowSendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TaskContainerBuilder_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_TaskContainerBuilder_proto_goTypes,
		DependencyIndexes: file_TaskContainerBuilder_proto_depIdxs,
		MessageInfos:      file_TaskContainerBuilder_proto_msgTypes,
	}.Build()
	File_TaskContainerBuilder_proto = out.File
	file_TaskContainerBuilder_proto_rawDesc = nil
	file_TaskContainerBuilder_proto_goTypes = nil
	file_TaskContainerBuilder_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TaskContainerBuilderServiceClient is the client API for TaskContainerBuilderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskContainerBuilderServiceClient interface {
	InputWorkflowTask(ctx context.Context, in *InputWorkflowTaskRequest, opts ...grpc.CallOption) (*InputWorkflowTaskResponse, error)
}

type taskContainerBuilderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskContainerBuilderServiceClient(cc grpc.ClientConnInterface) TaskContainerBuilderServiceClient {
	return &taskContainerBuilderServiceClient{cc}
}

func (c *taskContainerBuilderServiceClient) InputWorkflowTask(ctx context.Context, in *InputWorkflowTaskRequest, opts ...grpc.CallOption) (*InputWorkflowTaskResponse, error) {
	out := new(InputWorkflowTaskResponse)
	err := c.cc.Invoke(ctx, "/TaskContainerBuilder.TaskContainerBuilderService/InputWorkflowTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskContainerBuilderServiceServer is the server API for TaskContainerBuilderService service.
type TaskContainerBuilderServiceServer interface {
	InputWorkflowTask(context.Context, *InputWorkflowTaskRequest) (*InputWorkflowTaskResponse, error)
}

// UnimplementedTaskContainerBuilderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTaskContainerBuilderServiceServer struct {
}

func (*UnimplementedTaskContainerBuilderServiceServer) InputWorkflowTask(context.Context, *InputWorkflowTaskRequest) (*InputWorkflowTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InputWorkflowTask not implemented")
}

func RegisterTaskContainerBuilderServiceServer(s *grpc.Server, srv TaskContainerBuilderServiceServer) {
	s.RegisterService(&_TaskContainerBuilderService_serviceDesc, srv)
}

func _TaskContainerBuilderService_InputWorkflowTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputWorkflowTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskContainerBuilderServiceServer).InputWorkflowTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskContainerBuilder.TaskContainerBuilderService/InputWorkflowTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskContainerBuilderServiceServer).InputWorkflowTask(ctx, req.(*InputWorkflowTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskContainerBuilderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TaskContainerBuilder.TaskContainerBuilderService",
	HandlerType: (*TaskContainerBuilderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InputWorkflowTask",
			Handler:    _TaskContainerBuilderService_InputWorkflowTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "TaskContainerBuilder.proto",
}

// WorkflowInjectorServiceClient is the client API for WorkflowInjectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkflowInjectorServiceClient interface {
	NextWorkflowSend(ctx context.Context, in *NextWorkflowSendRequest, opts ...grpc.CallOption) (*NextWorkflowSendResponse, error)
}

type workflowInjectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowInjectorServiceClient(cc grpc.ClientConnInterface) WorkflowInjectorServiceClient {
	return &workflowInjectorServiceClient{cc}
}

func (c *workflowInjectorServiceClient) NextWorkflowSend(ctx context.Context, in *NextWorkflowSendRequest, opts ...grpc.CallOption) (*NextWorkflowSendResponse, error) {
	out := new(NextWorkflowSendResponse)
	err := c.cc.Invoke(ctx, "/TaskContainerBuilder.WorkflowInjectorService/NextWorkflowSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowInjectorServiceServer is the server API for WorkflowInjectorService service.
type WorkflowInjectorServiceServer interface {
	NextWorkflowSend(context.Context, *NextWorkflowSendRequest) (*NextWorkflowSendResponse, error)
}

// UnimplementedWorkflowInjectorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWorkflowInjectorServiceServer struct {
}

func (*UnimplementedWorkflowInjectorServiceServer) NextWorkflowSend(context.Context, *NextWorkflowSendRequest) (*NextWorkflowSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextWorkflowSend not implemented")
}

func RegisterWorkflowInjectorServiceServer(s *grpc.Server, srv WorkflowInjectorServiceServer) {
	s.RegisterService(&_WorkflowInjectorService_serviceDesc, srv)
}

func _WorkflowInjectorService_NextWorkflowSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextWorkflowSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowInjectorServiceServer).NextWorkflowSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskContainerBuilder.WorkflowInjectorService/NextWorkflowSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowInjectorServiceServer).NextWorkflowSend(ctx, req.(*NextWorkflowSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkflowInjectorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TaskContainerBuilder.WorkflowInjectorService",
	HandlerType: (*WorkflowInjectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NextWorkflowSend",
			Handler:    _WorkflowInjectorService_NextWorkflowSend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "TaskContainerBuilder.proto",
}
